spring.application.name=springboot-kafka-tutorial

#configure kafka-consumer
spring.kafka.consumer.bootstrap-servers: localhost:9092 
#localhost:9092: kafka broker running in 9092

#configure kafka-consumer-group
spring.kafka.consumer.group-id: myGroup
#provide consumer group Id (unique) in which consumer is belongs to..

#offset
#This property specifies what to do when there is no initial offset in a kafka or
#if the current offset does not exist anymore on the server.
#earliest: it will automatically reset the offset to the earliest offser.
# latest, none other values.
spring.kafka.consumer.auto-offset-reset: earliest

spring.kafka.consumer.key-deserializer: org.apache.kafka.common.serialization.StringDeserializer

#spring.kafka.consumer.value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*

spring.kafka.producer.bootstrap-servers: localhost:9092

#Producer
spring.kafka.producer.key-serializer: org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer: org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

spring.kafka.topic.name = ar
spring.kafka.topic.json-name = ar_json